// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using T120B165.Data;

namespace T120B165.Migrations
{
    [DbContext(typeof(T120B165Context))]
    partial class T120B165ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("T120B165.Models.InformalGathering", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("InformalGatherings");
                });

            modelBuilder.Entity("T120B165.Models.InformalGatheringStudent", b =>
                {
                    b.Property<int?>("InformalGatheringID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("InformalGatheringID", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("InformalGatheringStudents");
                });

            modelBuilder.Entity("T120B165.Models.InformalGatheringTimeTable", b =>
                {
                    b.Property<int?>("InformalGatheringID")
                        .HasColumnType("int");

                    b.Property<int?>("TimeTableID")
                        .HasColumnType("int");

                    b.HasKey("InformalGatheringID", "TimeTableID");

                    b.HasIndex("TimeTableID");

                    b.ToTable("StudentTimeTables");
                });

            modelBuilder.Entity("T120B165.Models.Lecture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Hall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LecturerID")
                        .HasColumnType("int");

                    b.Property<int>("ModuleID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tags")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LecturerID");

                    b.HasIndex("ModuleID");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("T120B165.Models.LectureStudent", b =>
                {
                    b.Property<int?>("LectureID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("LectureID", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("LectureStudents");
                });

            modelBuilder.Entity("T120B165.Models.LectureTimeTable", b =>
                {
                    b.Property<int?>("LectureID")
                        .HasColumnType("int");

                    b.Property<int?>("TimeTableID")
                        .HasColumnType("int");

                    b.HasKey("LectureID", "TimeTableID");

                    b.HasIndex("TimeTableID");

                    b.ToTable("LectureTimeTables");
                });

            modelBuilder.Entity("T120B165.Models.Lecturer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("T120B165.Models.Module", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LecturerID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LecturerID");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("T120B165.Models.ModuleStudent", b =>
                {
                    b.Property<int?>("ModuleID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ModuleID", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("ModuleStudents");
                });

            modelBuilder.Entity("T120B165.Models.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Vidko")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.HasKey("ID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("T120B165.Models.TimeTable", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.ToTable("TimeTables");
                });

            modelBuilder.Entity("T120B165.Models.InformalGatheringStudent", b =>
                {
                    b.HasOne("T120B165.Models.Student", "Student")
                        .WithMany("InformalGatherings")
                        .HasForeignKey("InformalGatheringID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("T120B165.Models.InformalGathering", "InformalGathering")
                        .WithMany("Students")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("T120B165.Models.InformalGatheringTimeTable", b =>
                {
                    b.HasOne("T120B165.Models.TimeTable", "TimeTable")
                        .WithMany("InformalGatherings")
                        .HasForeignKey("InformalGatheringID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("T120B165.Models.InformalGathering", "InformalGathering")
                        .WithMany("TimeTables")
                        .HasForeignKey("TimeTableID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("T120B165.Models.Lecture", b =>
                {
                    b.HasOne("T120B165.Models.Lecturer", null)
                        .WithMany("TaughtLectures")
                        .HasForeignKey("LecturerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("T120B165.Models.Module", "Module")
                        .WithMany("Lectures")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("T120B165.Models.LectureStudent", b =>
                {
                    b.HasOne("T120B165.Models.Student", "Student")
                        .WithMany("Lectures")
                        .HasForeignKey("LectureID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("T120B165.Models.Lecture", "Lecture")
                        .WithMany("Students")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("T120B165.Models.LectureTimeTable", b =>
                {
                    b.HasOne("T120B165.Models.TimeTable", "TimeTable")
                        .WithMany("Lectures")
                        .HasForeignKey("LectureID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("T120B165.Models.Lecture", "Lecture")
                        .WithMany("TimeTables")
                        .HasForeignKey("TimeTableID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("T120B165.Models.Module", b =>
                {
                    b.HasOne("T120B165.Models.Lecturer", "Lecturer")
                        .WithMany("ManagedModules")
                        .HasForeignKey("LecturerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("T120B165.Models.ModuleStudent", b =>
                {
                    b.HasOne("T120B165.Models.Student", "Student")
                        .WithMany("Modules")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("T120B165.Models.Module", "Module")
                        .WithMany("Students")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("T120B165.Models.TimeTable", b =>
                {
                    b.HasOne("T120B165.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
